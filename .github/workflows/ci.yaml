name: Django CI/CD Pipeline

on:
  push:
    branches: [master]  # It starts when you push to the main branch
  pull_request:
    branches: [master]  # It is started when creating a pull request in the main

jobs:
  test:
    runs-on: ubuntu-latest  # The build runs on Ubuntu

    services:
      postgres:  # Configuring the PostgreSQL database
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Version Python

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Installing dependencies

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files  # Running a pre-commit for all files    

    - name: Run migrations
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: python manage.py migrate  # Application

    - name: Run tests with coverage
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: coverage run manage.py test  # Start tests with coverage

    - name: Generate coverage report
      run: |
        coverage report  # Show a summary report in the console

  deploy:
    runs-on: ubuntu-latest
    needs: test  # It starts only after successful execution of the tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update code
        run: |
          cd /home/ec2-user/sitecrypto
          git pull origin master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose  

      - name: Create .env_docker file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env_docker
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env_docker
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env_docker
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env_docker
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env_docker
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env_docker

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker-compose build --no-cache
          docker-compose push 

      - name: Deploy to AWS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$HOST << EOF
            cd /home/ec2-user/sitecrypto
            docker-compose down
            docker-compose pull
            docker image prune -f
            docker-compose up -d
          EOF